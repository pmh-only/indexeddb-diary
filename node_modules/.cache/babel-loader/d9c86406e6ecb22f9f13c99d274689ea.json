{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nimport core from './lib/core';\nimport util from './lib/util';\nimport _Constructor from './lib/constructor';\nimport _Context from './lib/context';\nexport default {\n  /**\n   * @description Returns the create function with preset options.\n   * If the options overlap, the options of the 'create' function take precedence.\n   * @param {Json} options Initialization options\n   * @returns {Object}\n   */\n  init: function init(init_options) {\n    return {\n      create: function (idOrElement, options) {\n        return this.create(idOrElement, options, init_options);\n      }.bind(this)\n    };\n  },\n\n  /**\n   * @description Create the suneditor\n   * @param {String|Element} idOrElement textarea Id or textarea element\n   * @param {JSON|Object} options user options\n   * @returns {Object}\n   */\n  create: function create(idOrElement, options, _init_options) {\n    util._propertiesInit();\n\n    if (typeof options !== 'object') options = {};\n\n    if (_init_options) {\n      options = [_init_options, options].reduce(function (init, option) {\n        for (var key in option) {\n          if (!util.hasOwn(option, key)) continue;\n\n          if (key === 'plugins' && option[key] && init[key]) {\n            (function () {\n              var i = init[key],\n                  o = option[key];\n              i = i.length ? i : Object.keys(i).map(function (name) {\n                return i[name];\n              });\n              o = o.length ? o : Object.keys(o).map(function (name) {\n                return o[name];\n              });\n              init[key] = o.filter(function (val) {\n                return i.indexOf(val) === -1;\n              }).concat(i);\n            })();\n          } else {\n            init[key] = option[key];\n          }\n        }\n\n        return init;\n      }, {});\n    }\n\n    var element = typeof idOrElement === 'string' ? document.getElementById(idOrElement) : idOrElement;\n\n    if (!element) {\n      if (typeof idOrElement === 'string') {\n        throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:\"' + idOrElement + '\")');\n      }\n\n      throw Error('[SUNEDITOR.create.fail] suneditor requires textarea\\'s element or id value');\n    }\n\n    var cons = _Constructor.init(element, options);\n\n    if (cons.constructed._top.id && document.getElementById(cons.constructed._top.id)) {\n      throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:\"' + cons.constructed._top.id + '\")');\n    }\n\n    return core(_Context(element, cons.constructed, cons.options), cons.pluginCallButtons, cons.plugins, cons.options.lang, options, cons._responsiveButtons);\n  }\n};","map":{"version":3,"sources":["/github/workspace/node_modules/suneditor/src/suneditor.js"],"names":["core","util","_Constructor","_Context","init","init_options","create","idOrElement","options","bind","_init_options","_propertiesInit","reduce","option","key","hasOwn","i","o","length","Object","keys","map","name","filter","val","indexOf","concat","element","document","getElementById","Error","cons","constructed","_top","id","pluginCallButtons","plugins","lang","_responsiveButtons"],"mappings":"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","sourcesContent":["/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nimport core from './lib/core';\nimport util from './lib/util';\nimport _Constructor from './lib/constructor';\nimport _Context from './lib/context';\n\nexport default {\n    /**\n     * @description Returns the create function with preset options.\n     * If the options overlap, the options of the 'create' function take precedence.\n     * @param {Json} options Initialization options\n     * @returns {Object}\n     */\n    init: function (init_options) {\n        return {\n            create: function (idOrElement, options) {\n                return this.create(idOrElement, options, init_options);\n            }.bind(this)\n        };\n    },\n\n    /**\n     * @description Create the suneditor\n     * @param {String|Element} idOrElement textarea Id or textarea element\n     * @param {JSON|Object} options user options\n     * @returns {Object}\n     */\n    create: function (idOrElement, options, _init_options) {\n        util._propertiesInit();\n\n        if (typeof options !== 'object') options = {};\n        if (_init_options) {\n            options =  [_init_options, options].reduce(function (init, option) {\n                            for (let key in option) {\n                                if (!util.hasOwn(option, key)) continue;\n                                if (key === 'plugins' && option[key] && init[key]) {\n                                    let i = init[key], o = option[key];\n                                    i = i.length ? i : Object.keys(i).map(function(name) { return i[name]; });\n                                    o = o.length ? o : Object.keys(o).map(function(name) { return o[name]; });\n                                    init[key] = (o.filter(function(val) { return i.indexOf(val) === -1; })).concat(i);\n                                } else {\n                                    init[key] = option[key];\n                                }\n                            }\n                            return init;\n                        }, {});\n        }\n        \n        const element = typeof idOrElement === 'string' ? document.getElementById(idOrElement) : idOrElement;\n\n        if (!element) {\n            if (typeof idOrElement === 'string') {\n                throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:\"' + idOrElement + '\")');\n            }\n\n            throw Error('[SUNEDITOR.create.fail] suneditor requires textarea\\'s element or id value');\n        }\n\n        const cons = _Constructor.init(element, options);\n\n        if (cons.constructed._top.id && document.getElementById(cons.constructed._top.id)) {\n            throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:\"' + cons.constructed._top.id + '\")');\n        }\n\n        return core(_Context(element, cons.constructed, cons.options), cons.pluginCallButtons, cons.plugins, cons.options.lang, options, cons._responsiveButtons);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}