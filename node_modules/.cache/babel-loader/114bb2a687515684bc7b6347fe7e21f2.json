{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'formatBlock',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    var context = core.context;\n    context.formatBlock = {\n      targetText: targetElement.querySelector('.txt'),\n      targetTooltip: targetElement.parentNode.querySelector('.se-tooltip-text'),\n      _formatList: null,\n      currentFormat: ''\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    /** add event listeners */\n\n    listDiv.querySelector('ul').addEventListener('click', this.pickUp.bind(core));\n    context.formatBlock._formatList = listDiv.querySelectorAll('li button');\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** empty memory */\n\n    listDiv = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var option = core.options;\n    var lang_toolbar = core.lang.toolbar;\n    var listDiv = core.util.createElement('DIV');\n    listDiv.className = 'se-submenu se-list-layer se-list-format';\n    var defaultFormats = ['p', 'div', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n    var formatList = !option.formats || option.formats.length === 0 ? defaultFormats : option.formats;\n    var list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n\n    for (var i = 0, len = formatList.length, format, tagName, command, name, h, attrs, className; i < len; i++) {\n      format = formatList[i];\n\n      if (typeof format === 'string' && defaultFormats.indexOf(format) > -1) {\n        tagName = format.toLowerCase();\n        command = tagName === 'blockquote' ? 'range' : tagName === 'pre' ? 'free' : 'replace';\n        h = /^h/.test(tagName) ? tagName.match(/\\d+/)[0] : '';\n        name = lang_toolbar['tag_' + (h ? 'h' : tagName)] + h;\n        className = '';\n        attrs = '';\n      } else {\n        tagName = format.tag.toLowerCase();\n        command = format.command;\n        name = format.name || tagName;\n        className = format.class;\n        attrs = className ? ' class=\"' + className + '\"' : '';\n      }\n\n      list += '<li>' + '<button type=\"button\" class=\"se-btn-list\" data-command=\"' + command + '\" data-value=\"' + tagName + '\" data-class=\"' + className + '\" title=\"' + name + '\">' + '<' + tagName + attrs + '>' + name + '</' + tagName + '>' + '</button></li>';\n    }\n\n    list += '</ul></div>';\n    listDiv.innerHTML = list;\n    return listDiv;\n  },\n\n  /**\n  * @Override core\n  */\n  active: function active(element) {\n    var formatTitle = this.lang.toolbar.formats;\n    var target = this.context.formatBlock.targetText;\n\n    if (!element) {\n      this.util.changeTxt(target, formatTitle);\n    } else if (this.util.isFormatElement(element)) {\n      var formatContext = this.context.formatBlock;\n      var formatList = formatContext._formatList;\n      var nodeName = element.nodeName.toLowerCase();\n      var className = (element.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim();\n\n      for (var i = 0, len = formatList.length, f; i < len; i++) {\n        f = formatList[i];\n\n        if (nodeName === f.getAttribute('data-value') && className === f.getAttribute('data-class')) {\n          formatTitle = f.title;\n          break;\n        }\n      }\n\n      this.util.changeTxt(target, formatTitle);\n      target.setAttribute('data-value', nodeName);\n      target.setAttribute('data-class', className);\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n  * @Override submenu\n  */\n  on: function on() {\n    var formatContext = this.context.formatBlock;\n    var formatList = formatContext._formatList;\n    var target = formatContext.targetText;\n    var currentFormat = (target.getAttribute('data-value') || '') + (target.getAttribute('data-class') || '');\n\n    if (currentFormat !== formatContext.currentFormat) {\n      for (var i = 0, len = formatList.length, f; i < len; i++) {\n        f = formatList[i];\n\n        if (currentFormat === f.getAttribute('data-value') + f.getAttribute('data-class')) {\n          this.util.addClass(f, 'active');\n        } else {\n          this.util.removeClass(f, 'active');\n        }\n      }\n\n      formatContext.currentFormat = currentFormat;\n    }\n  },\n  pickUp: function pickUp(e) {\n    var _this = this;\n\n    e.preventDefault();\n    e.stopPropagation();\n    var target = e.target;\n    var command = null,\n        value = null,\n        tag = null,\n        className = '';\n\n    while (!command && !/UL/i.test(target.tagName)) {\n      command = target.getAttribute('data-command');\n      value = target.getAttribute('data-value');\n      className = target.getAttribute('data-class');\n\n      if (command) {\n        tag = target.firstChild;\n        break;\n      }\n\n      target = target.parentNode;\n    }\n\n    if (!command) return; // blockquote\n\n    if (command === 'range') {\n      var rangeElement = tag.cloneNode(false);\n      this.applyRangeFormatElement(rangeElement);\n    } // free, replace\n    else {\n        var range = this.getRange();\n        var selectedFormsts = this.getSelectedElementsAndComponents(false);\n\n        if (selectedFormsts.length === 0) {\n          range = this.getRange_addLine(range, null);\n          selectedFormsts = this.getSelectedElementsAndComponents(false);\n          if (selectedFormsts.length === 0) return;\n        }\n\n        var startOffset = range.startOffset;\n        var endOffset = range.endOffset;\n        var util = this.util;\n        var first = selectedFormsts[0];\n        var last = selectedFormsts[selectedFormsts.length - 1];\n        var firstPath = util.getNodePath(range.startContainer, first, null, null);\n        var lastPath = util.getNodePath(range.endContainer, last, null, null); // remove selected list\n\n        var rlist = this.detachList(selectedFormsts, false);\n        if (rlist.sc) first = rlist.sc;\n        if (rlist.ec) last = rlist.ec; // change format tag\n\n        this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n        var modifiedFormsts = this.getSelectedElementsAndComponents(false); // free format\n\n        if (command === 'free') {\n          (function () {\n            var len = modifiedFormsts.length - 1;\n            var parentNode = modifiedFormsts[len].parentNode;\n            var freeElement = tag.cloneNode(false);\n            var focusElement = freeElement;\n\n            for (var i = len, f, html, before, next, inner, isComp, _first = true; i >= 0; i--) {\n              f = modifiedFormsts[i];\n              if (f === (!modifiedFormsts[i + 1] ? null : modifiedFormsts[i + 1].parentNode)) continue;\n              isComp = util.isComponent(f);\n              html = isComp ? '' : f.innerHTML.replace(/(?!>)\\s+(?=<)|\\n/g, ' ');\n              before = util.getParentElement(f, function (current) {\n                return current.parentNode === parentNode;\n              });\n\n              if (parentNode !== f.parentNode || isComp) {\n                if (util.isFormatElement(parentNode)) {\n                  parentNode.parentNode.insertBefore(freeElement, parentNode.nextSibling);\n                  parentNode = parentNode.parentNode;\n                } else {\n                  parentNode.insertBefore(freeElement, before ? before.nextSibling : null);\n                  parentNode = f.parentNode;\n                }\n\n                next = freeElement.nextSibling;\n\n                if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                  freeElement.innerHTML += '<BR>' + next.innerHTML;\n                  util.removeItem(next);\n                }\n\n                freeElement = tag.cloneNode(false);\n                _first = true;\n              }\n\n              inner = freeElement.innerHTML;\n              freeElement.innerHTML = (_first || !html || !inner || /<br>$/i.test(html) ? html : html + '<BR>') + inner;\n\n              if (i === 0) {\n                parentNode.insertBefore(freeElement, f);\n                next = f.nextSibling;\n\n                if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                  freeElement.innerHTML += '<BR>' + next.innerHTML;\n                  util.removeItem(next);\n                }\n\n                var prev = freeElement.previousSibling;\n\n                if (prev && freeElement.nodeName === prev.nodeName && util.isSameAttributes(freeElement, prev)) {\n                  prev.innerHTML += '<BR>' + freeElement.innerHTML;\n                  util.removeItem(freeElement);\n                }\n              }\n\n              if (!isComp) util.removeItem(f);\n              if (!!html) _first = false;\n            }\n\n            _this.setRange(focusElement, 0, focusElement, 0);\n          })();\n        } // replace format\n        else {\n            for (var i = 0, len = modifiedFormsts.length, node, newFormat; i < len; i++) {\n              node = modifiedFormsts[i];\n\n              if ((node.nodeName.toLowerCase() !== value.toLowerCase() || (node.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim() !== className) && !util.isComponent(node)) {\n                newFormat = tag.cloneNode(false);\n                util.copyFormatAttributes(newFormat, node);\n                newFormat.innerHTML = node.innerHTML;\n                node.parentNode.replaceChild(newFormat, node);\n              }\n\n              if (i === 0) first = newFormat || node;\n              if (i === len - 1) last = newFormat || node;\n              newFormat = null;\n            }\n\n            this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n          } // history stack\n\n\n        this.history.push(false);\n      }\n\n    this.submenuOff();\n  }\n};","map":{"version":3,"sources":["/github/workspace/node_modules/suneditor/src/plugins/submenu/formatBlock.js"],"names":["name","display","add","core","targetElement","context","formatBlock","targetText","querySelector","targetTooltip","parentNode","_formatList","currentFormat","listDiv","setSubmenu","addEventListener","pickUp","bind","querySelectorAll","initMenuTarget","option","options","lang_toolbar","lang","toolbar","util","createElement","className","defaultFormats","formatList","formats","length","list","i","len","format","tagName","command","h","attrs","indexOf","toLowerCase","test","match","tag","class","innerHTML","active","element","formatTitle","target","changeTxt","isFormatElement","formatContext","nodeName","trim","f","getAttribute","title","setAttribute","on","addClass","removeClass","e","preventDefault","stopPropagation","value","firstChild","rangeElement","cloneNode","applyRangeFormatElement","range","getRange","selectedFormsts","getSelectedElementsAndComponents","getRange_addLine","startOffset","endOffset","first","last","firstPath","getNodePath","startContainer","lastPath","endContainer","rlist","detachList","sc","ec","setRange","getNodeFromPath","modifiedFormsts","freeElement","focusElement","html","before","next","inner","isComp","isComponent","replace","getParentElement","current","insertBefore","nextSibling","isSameAttributes","removeItem","prev","previousSibling","node","newFormat","copyFormatAttributes","replaceChild","history","push","submenuOff"],"mappings":"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","sourcesContent":["/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n    name: 'formatBlock',\n    display: 'submenu',\n    add: function (core, targetElement) {\n        const context = core.context;\n        context.formatBlock = {\n            targetText: targetElement.querySelector('.txt'),\n            targetTooltip: targetElement.parentNode.querySelector('.se-tooltip-text'),\n            _formatList: null,\n            currentFormat: ''\n        };\n\n        /** set submenu */\n        let listDiv = this.setSubmenu(core);\n\n        /** add event listeners */\n        listDiv.querySelector('ul').addEventListener('click', this.pickUp.bind(core));\n        context.formatBlock._formatList = listDiv.querySelectorAll('li button');\n\n        /** append target button menu */\n        core.initMenuTarget(this.name, targetElement, listDiv);\n\n        /** empty memory */\n        listDiv = null;\n    },\n\n    setSubmenu: function (core) {\n        const option = core.options;\n        const lang_toolbar = core.lang.toolbar;\n        const listDiv = core.util.createElement('DIV');\n        listDiv.className = 'se-submenu se-list-layer se-list-format';\n\n        const defaultFormats = ['p', 'div', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n        const formatList = !option.formats || option.formats.length === 0 ? defaultFormats : option.formats;\n\n        let list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n        for (let i = 0, len = formatList.length, format, tagName, command, name, h, attrs, className; i < len; i++) {\n            format = formatList[i];\n            \n            if (typeof format === 'string' && defaultFormats.indexOf(format) > -1) {\n                tagName = format.toLowerCase();\n                command = tagName === 'blockquote' ? 'range' : tagName === 'pre' ? 'free' : 'replace';\n                h = /^h/.test(tagName) ? tagName.match(/\\d+/)[0] : '';\n                name = lang_toolbar['tag_' + (h ? 'h' : tagName)] + h;\n                className = '';\n                attrs = '';\n            } else {\n                tagName = format.tag.toLowerCase();\n                command = format.command;\n                name = format.name || tagName;\n                className = format.class;\n                attrs = className ? ' class=\"' + className + '\"' : '';\n            }\n\n            list += '<li>' +\n                '<button type=\"button\" class=\"se-btn-list\" data-command=\"' + command + '\" data-value=\"' + tagName + '\" data-class=\"' + className + '\" title=\"' + name + '\">' +\n                    '<' + tagName + attrs + '>' + name + '</' + tagName + '>' +\n                '</button></li>';\n        }\n        list += '</ul></div>';\n\n        listDiv.innerHTML = list;\n\n        return listDiv;\n    },\n\n     /**\n     * @Override core\n     */\n    active: function (element) {\n        let formatTitle = this.lang.toolbar.formats;\n        const target = this.context.formatBlock.targetText;\n\n        if (!element) {\n            this.util.changeTxt(target, formatTitle);\n        } else if (this.util.isFormatElement(element)) {\n            const formatContext = this.context.formatBlock;\n            const formatList = formatContext._formatList;\n            const nodeName = element.nodeName.toLowerCase();\n            const className = (element.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim();\n\n            for (let i = 0, len = formatList.length, f; i < len; i++) {\n                f = formatList[i];\n                if (nodeName === f.getAttribute('data-value') && className === f.getAttribute('data-class')) {\n                    formatTitle = f.title;\n                    break;\n                }\n            }\n\n            this.util.changeTxt(target, formatTitle);\n            target.setAttribute('data-value', nodeName);\n            target.setAttribute('data-class', className);\n\n            return true;\n        }\n\n        return false;\n    },\n\n     /**\n     * @Override submenu\n     */\n    on: function () {\n        const formatContext = this.context.formatBlock;\n        const formatList = formatContext._formatList;\n        const target = formatContext.targetText;\n        const currentFormat = (target.getAttribute('data-value') || '') + (target.getAttribute('data-class') || '');\n\n        if (currentFormat !== formatContext.currentFormat) {\n            for (let i = 0, len = formatList.length, f; i < len; i++) {\n                f = formatList[i];\n                if (currentFormat === f.getAttribute('data-value') + f.getAttribute('data-class')) {\n                    this.util.addClass(f, 'active');\n                } else {\n                    this.util.removeClass(f, 'active');\n                }\n            }\n\n            formatContext.currentFormat = currentFormat;\n        }\n    },\n\n    pickUp: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        let target = e.target;\n        let command = null, value = null, tag = null, className = '';\n        \n        while (!command && !/UL/i.test(target.tagName)) {\n            command = target.getAttribute('data-command');\n            value = target.getAttribute('data-value');\n            className = target.getAttribute('data-class');\n            if (command) {\n                tag = target.firstChild;\n                break;\n            }\n            target = target.parentNode;\n        }\n\n        if (!command) return;\n\n        // blockquote\n        if (command === 'range') {\n            const rangeElement = tag.cloneNode(false);\n            this.applyRangeFormatElement(rangeElement);\n        }\n        // free, replace\n        else {\n            let range = this.getRange();\n            let selectedFormsts = this.getSelectedElementsAndComponents(false);\n\n            if (selectedFormsts.length === 0) {\n                range = this.getRange_addLine(range, null);\n                selectedFormsts = this.getSelectedElementsAndComponents(false);\n                if (selectedFormsts.length === 0) return;\n            }\n\n            const startOffset = range.startOffset;\n            const endOffset = range.endOffset;\n\n            const util = this.util;\n            let first = selectedFormsts[0];\n            let last = selectedFormsts[selectedFormsts.length - 1];\n            const firstPath = util.getNodePath(range.startContainer, first, null, null);\n            const lastPath = util.getNodePath(range.endContainer, last, null, null);\n            \n            // remove selected list\n            const rlist = this.detachList(selectedFormsts, false);\n            if (rlist.sc) first = rlist.sc;\n            if (rlist.ec) last = rlist.ec;\n\n            // change format tag\n            this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n            const modifiedFormsts = this.getSelectedElementsAndComponents(false);\n\n            // free format\n            if (command === 'free') {\n                const len = modifiedFormsts.length - 1;\n                let parentNode = modifiedFormsts[len].parentNode;\n                let freeElement = tag.cloneNode(false);\n                const focusElement = freeElement;\n    \n                for (let i = len, f, html, before, next, inner, isComp, first = true; i >= 0; i--) {\n                    f = modifiedFormsts[i];\n                    if (f === (!modifiedFormsts[i + 1] ? null : modifiedFormsts[i + 1].parentNode)) continue;\n    \n                    isComp = util.isComponent(f);\n                    html = isComp ? '' : f.innerHTML.replace(/(?!>)\\s+(?=<)|\\n/g, ' ');\n                    before = util.getParentElement(f, function (current) {\n                        return current.parentNode === parentNode;\n                    });\n    \n                    if (parentNode !== f.parentNode || isComp) {\n                        if (util.isFormatElement(parentNode)) {\n                            parentNode.parentNode.insertBefore(freeElement, parentNode.nextSibling);\n                            parentNode = parentNode.parentNode;\n                        } else {\n                            parentNode.insertBefore(freeElement, before ? before.nextSibling : null);\n                            parentNode = f.parentNode;\n                        }\n\n                        next = freeElement.nextSibling;\n                        if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                            freeElement.innerHTML += '<BR>' + next.innerHTML;\n                            util.removeItem(next);\n                        }\n\n                        freeElement = tag.cloneNode(false);\n                        first = true;\n                    }\n    \n                    inner = freeElement.innerHTML;\n                    freeElement.innerHTML = ((first || !html || !inner || /<br>$/i.test(html)) ? html : html + '<BR>') + inner;\n\n                    if (i === 0) {\n                        parentNode.insertBefore(freeElement, f);\n                        next = f.nextSibling;\n                        if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                            freeElement.innerHTML += '<BR>' + next.innerHTML;\n                            util.removeItem(next);\n                        }\n\n                        const prev = freeElement.previousSibling;\n                        if (prev && freeElement.nodeName === prev.nodeName && util.isSameAttributes(freeElement, prev)) {\n                            prev.innerHTML += '<BR>' + freeElement.innerHTML;\n                            util.removeItem(freeElement);\n                        }\n                    }\n\n                    if (!isComp) util.removeItem(f);\n                    if (!!html) first = false;\n                }\n    \n                this.setRange(focusElement, 0, focusElement, 0);\n            }\n            // replace format\n            else {\n                for (let i = 0, len = modifiedFormsts.length, node, newFormat; i < len; i++) {\n                    node = modifiedFormsts[i];\n                    \n                    if ((node.nodeName.toLowerCase() !== value.toLowerCase() || (node.className.match(/(\\s|^)__se__format__[^\\s]+/) || [''])[0].trim() !== className) && !util.isComponent(node)) {\n                        newFormat = tag.cloneNode(false);\n                        util.copyFormatAttributes(newFormat, node);\n                        newFormat.innerHTML = node.innerHTML;\n    \n                        node.parentNode.replaceChild(newFormat, node);\n                    }\n    \n                    if (i === 0) first = newFormat || node;\n                    if (i === len - 1) last = newFormat || node;\n                    newFormat = null;\n                }\n    \n                this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n            }\n\n            // history stack\n            this.history.push(false);\n        }\n\n        this.submenuOff();\n    }\n};\n"]},"metadata":{},"sourceType":"module"}