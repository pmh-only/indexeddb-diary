{"ast":null,"code":"/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n  name: 'font',\n  display: 'submenu',\n  add: function add(core, targetElement) {\n    var context = core.context;\n    context.font = {\n      targetText: targetElement.querySelector('.txt'),\n      targetTooltip: targetElement.parentNode.querySelector('.se-tooltip-text'),\n      _fontList: null,\n      currentFont: ''\n    };\n    /** set submenu */\n\n    var listDiv = this.setSubmenu(core);\n    /** add event listeners */\n\n    listDiv.querySelector('.se-list-inner').addEventListener('click', this.pickup.bind(core));\n    context.font._fontList = listDiv.querySelectorAll('ul li button');\n    /** append target button menu */\n\n    core.initMenuTarget(this.name, targetElement, listDiv);\n    /** empty memory */\n\n    listDiv = null;\n  },\n  setSubmenu: function setSubmenu(core) {\n    var option = core.options;\n    var lang = core.lang;\n    var listDiv = core.util.createElement('DIV');\n    listDiv.className = 'se-submenu se-list-layer se-list-font-family';\n    var font, text, i, len;\n    var fontList = !option.font ? ['Arial', 'Comic Sans MS', 'Courier New', 'Impact', 'Georgia', 'tahoma', 'Trebuchet MS', 'Verdana'] : option.font;\n    var list = '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"default_value se-btn-list\" title=\"' + lang.toolbar.default + '\">(' + lang.toolbar.default + ')</button></li>';\n\n    for (i = 0, len = fontList.length; i < len; i++) {\n      font = fontList[i];\n      text = font.split(',')[0];\n      list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + font + '\" data-txt=\"' + text + '\" title=\"' + text + '\" style=\"font-family:' + font + ';\">' + text + '</button></li>';\n    }\n\n    list += '</ul></div>';\n    listDiv.innerHTML = list;\n    return listDiv;\n  },\n\n  /**\n  * @Override core\n  */\n  active: function active(element) {\n    var target = this.context.font.targetText;\n    var tooltip = this.context.font.targetTooltip;\n\n    if (!element) {\n      var font = this.hasFocus ? this.wwComputedStyle.fontFamily : this.lang.toolbar.font;\n      this.util.changeTxt(target, font);\n      this.util.changeTxt(tooltip, this.hasFocus ? this.lang.toolbar.font + ' (' + font + ')' : font);\n    } else if (element.style && element.style.fontFamily.length > 0) {\n      var selectFont = element.style.fontFamily.replace(/[\"']/g, '');\n      this.util.changeTxt(target, selectFont);\n      this.util.changeTxt(tooltip, this.lang.toolbar.font + ' (' + selectFont + ')');\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n  * @Override submenu\n  */\n  on: function on() {\n    var fontContext = this.context.font;\n    var fontList = fontContext._fontList;\n    var currentFont = fontContext.targetText.textContent;\n\n    if (currentFont !== fontContext.currentFont) {\n      for (var i = 0, len = fontList.length; i < len; i++) {\n        if (currentFont === fontList[i].getAttribute('data-value')) {\n          this.util.addClass(fontList[i], 'active');\n        } else {\n          this.util.removeClass(fontList[i], 'active');\n        }\n      }\n\n      fontContext.currentFont = currentFont;\n    }\n  },\n  pickup: function pickup(e) {\n    if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n    e.preventDefault();\n    e.stopPropagation();\n    var value = e.target.getAttribute('data-value');\n\n    if (value) {\n      var newNode = this.util.createElement('SPAN');\n      newNode.style.fontFamily = value;\n      this.nodeChange(newNode, ['font-family'], null, null);\n    } else {\n      this.nodeChange(null, ['font-family'], ['span'], true);\n    }\n\n    this.submenuOff();\n  }\n};","map":{"version":3,"sources":["/github/workspace/node_modules/suneditor/src/plugins/submenu/font.js"],"names":["name","display","add","core","targetElement","context","font","targetText","querySelector","targetTooltip","parentNode","_fontList","currentFont","listDiv","setSubmenu","addEventListener","pickup","bind","querySelectorAll","initMenuTarget","option","options","lang","util","createElement","className","text","i","len","fontList","list","toolbar","default","length","split","innerHTML","active","element","target","tooltip","hasFocus","wwComputedStyle","fontFamily","changeTxt","style","selectFont","replace","on","fontContext","textContent","getAttribute","addClass","removeClass","e","test","tagName","preventDefault","stopPropagation","value","newNode","nodeChange","submenuOff"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe;AACXA,EAAAA,IAAI,EAAE,MADK;AAEXC,EAAAA,OAAO,EAAE,SAFE;AAGXC,EAAAA,GAAG,EAAE,aAAUC,IAAV,EAAgBC,aAAhB,EAA+B;AAChC,QAAMC,OAAO,GAAGF,IAAI,CAACE,OAArB;AACAA,IAAAA,OAAO,CAACC,IAAR,GAAe;AACXC,MAAAA,UAAU,EAAEH,aAAa,CAACI,aAAd,CAA4B,MAA5B,CADD;AAEXC,MAAAA,aAAa,EAAEL,aAAa,CAACM,UAAd,CAAyBF,aAAzB,CAAuC,kBAAvC,CAFJ;AAGXG,MAAAA,SAAS,EAAE,IAHA;AAIXC,MAAAA,WAAW,EAAE;AAJF,KAAf;AAOA;;AACA,QAAIC,OAAO,GAAG,KAAKC,UAAL,CAAgBX,IAAhB,CAAd;AAEA;;AACAU,IAAAA,OAAO,CAACL,aAAR,CAAsB,gBAAtB,EAAwCO,gBAAxC,CAAyD,OAAzD,EAAkE,KAAKC,MAAL,CAAYC,IAAZ,CAAiBd,IAAjB,CAAlE;AAEAE,IAAAA,OAAO,CAACC,IAAR,CAAaK,SAAb,GAAyBE,OAAO,CAACK,gBAAR,CAAyB,cAAzB,CAAzB;AAEA;;AACAf,IAAAA,IAAI,CAACgB,cAAL,CAAoB,KAAKnB,IAAzB,EAA+BI,aAA/B,EAA8CS,OAA9C;AAEA;;AACAA,IAAAA,OAAO,GAAG,IAAV;AACH,GAzBU;AA2BXC,EAAAA,UAAU,EAAE,oBAAUX,IAAV,EAAgB;AACxB,QAAMiB,MAAM,GAAGjB,IAAI,CAACkB,OAApB;AACA,QAAMC,IAAI,GAAGnB,IAAI,CAACmB,IAAlB;AACA,QAAMT,OAAO,GAAGV,IAAI,CAACoB,IAAL,CAAUC,aAAV,CAAwB,KAAxB,CAAhB;AAEAX,IAAAA,OAAO,CAACY,SAAR,GAAoB,8CAApB;AAEA,QAAInB,IAAJ,EAAUoB,IAAV,EAAgBC,CAAhB,EAAmBC,GAAnB;AACA,QAAIC,QAAQ,GAAG,CAACT,MAAM,CAACd,IAAR,GACX,CACI,OADJ,EAEI,eAFJ,EAGI,aAHJ,EAII,QAJJ,EAKI,SALJ,EAMI,QANJ,EAOI,cAPJ,EAQI,SARJ,CADW,GAUPc,MAAM,CAACd,IAVf;AAYA,QAAIwB,IAAI,GAAG,gCACH,4BADG,GAEC,qEAFD,GAEyER,IAAI,CAACS,OAAL,CAAaC,OAFtF,GAEgG,KAFhG,GAEwGV,IAAI,CAACS,OAAL,CAAaC,OAFrH,GAE+H,iBAF1I;;AAGA,SAAKL,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGC,QAAQ,CAACI,MAA3B,EAAmCN,CAAC,GAAGC,GAAvC,EAA4CD,CAAC,EAA7C,EAAiD;AAC7CrB,MAAAA,IAAI,GAAGuB,QAAQ,CAACF,CAAD,CAAf;AACAD,MAAAA,IAAI,GAAGpB,IAAI,CAAC4B,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAP;AACAJ,MAAAA,IAAI,IAAI,+DAA+DxB,IAA/D,GAAsE,cAAtE,GAAuFoB,IAAvF,GAA8F,WAA9F,GAA4GA,IAA5G,GAAmH,uBAAnH,GAA6IpB,IAA7I,GAAoJ,KAApJ,GAA4JoB,IAA5J,GAAmK,gBAA3K;AACH;;AACDI,IAAAA,IAAI,IAAI,aAAR;AACAjB,IAAAA,OAAO,CAACsB,SAAR,GAAoBL,IAApB;AAEA,WAAOjB,OAAP;AACH,GA3DU;;AA6DV;AACL;AACA;AACIuB,EAAAA,MAAM,EAAE,gBAAUC,OAAV,EAAmB;AACvB,QAAMC,MAAM,GAAG,KAAKjC,OAAL,CAAaC,IAAb,CAAkBC,UAAjC;AACA,QAAMgC,OAAO,GAAG,KAAKlC,OAAL,CAAaC,IAAb,CAAkBG,aAAlC;;AAEA,QAAI,CAAC4B,OAAL,EAAc;AACV,UAAM/B,IAAI,GAAG,KAAKkC,QAAL,GAAgB,KAAKC,eAAL,CAAqBC,UAArC,GAAkD,KAAKpB,IAAL,CAAUS,OAAV,CAAkBzB,IAAjF;AACA,WAAKiB,IAAL,CAAUoB,SAAV,CAAoBL,MAApB,EAA4BhC,IAA5B;AACA,WAAKiB,IAAL,CAAUoB,SAAV,CAAoBJ,OAApB,EAA6B,KAAKC,QAAL,GAAgB,KAAKlB,IAAL,CAAUS,OAAV,CAAkBzB,IAAlB,GAAyB,IAAzB,GAAgCA,IAAhC,GAAuC,GAAvD,GAA6DA,IAA1F;AACH,KAJD,MAIO,IAAI+B,OAAO,CAACO,KAAR,IAAiBP,OAAO,CAACO,KAAR,CAAcF,UAAd,CAAyBT,MAAzB,GAAkC,CAAvD,EAA0D;AAC7D,UAAMY,UAAU,GAAGR,OAAO,CAACO,KAAR,CAAcF,UAAd,CAAyBI,OAAzB,CAAiC,OAAjC,EAAyC,EAAzC,CAAnB;AACA,WAAKvB,IAAL,CAAUoB,SAAV,CAAoBL,MAApB,EAA4BO,UAA5B;AACA,WAAKtB,IAAL,CAAUoB,SAAV,CAAoBJ,OAApB,EAA6B,KAAKjB,IAAL,CAAUS,OAAV,CAAkBzB,IAAlB,GAAyB,IAAzB,GAAgCuC,UAAhC,GAA6C,GAA1E;AACA,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH,GAhFU;;AAkFV;AACL;AACA;AACIE,EAAAA,EAAE,EAAE,cAAY;AACZ,QAAMC,WAAW,GAAG,KAAK3C,OAAL,CAAaC,IAAjC;AACA,QAAMuB,QAAQ,GAAGmB,WAAW,CAACrC,SAA7B;AACA,QAAMC,WAAW,GAAGoC,WAAW,CAACzC,UAAZ,CAAuB0C,WAA3C;;AAEA,QAAIrC,WAAW,KAAKoC,WAAW,CAACpC,WAAhC,EAA6C;AACzC,WAAK,IAAIe,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGC,QAAQ,CAACI,MAA/B,EAAuCN,CAAC,GAAGC,GAA3C,EAAgDD,CAAC,EAAjD,EAAqD;AACjD,YAAIf,WAAW,KAAKiB,QAAQ,CAACF,CAAD,CAAR,CAAYuB,YAAZ,CAAyB,YAAzB,CAApB,EAA4D;AACxD,eAAK3B,IAAL,CAAU4B,QAAV,CAAmBtB,QAAQ,CAACF,CAAD,CAA3B,EAAgC,QAAhC;AACH,SAFD,MAEO;AACH,eAAKJ,IAAL,CAAU6B,WAAV,CAAsBvB,QAAQ,CAACF,CAAD,CAA9B,EAAmC,QAAnC;AACH;AACJ;;AAEDqB,MAAAA,WAAW,CAACpC,WAAZ,GAA0BA,WAA1B;AACH;AACJ,GArGU;AAuGXI,EAAAA,MAAM,EAAE,gBAAUqC,CAAV,EAAa;AACjB,QAAI,CAAC,YAAYC,IAAZ,CAAiBD,CAAC,CAACf,MAAF,CAASiB,OAA1B,CAAL,EAAyC,OAAO,KAAP;AAEzCF,IAAAA,CAAC,CAACG,cAAF;AACAH,IAAAA,CAAC,CAACI,eAAF;AAEA,QAAMC,KAAK,GAAGL,CAAC,CAACf,MAAF,CAASY,YAAT,CAAsB,YAAtB,CAAd;;AAEA,QAAIQ,KAAJ,EAAW;AACP,UAAMC,OAAO,GAAG,KAAKpC,IAAL,CAAUC,aAAV,CAAwB,MAAxB,CAAhB;AACAmC,MAAAA,OAAO,CAACf,KAAR,CAAcF,UAAd,GAA2BgB,KAA3B;AACA,WAAKE,UAAL,CAAgBD,OAAhB,EAAyB,CAAC,aAAD,CAAzB,EAA0C,IAA1C,EAAgD,IAAhD;AACH,KAJD,MAIO;AACH,WAAKC,UAAL,CAAgB,IAAhB,EAAsB,CAAC,aAAD,CAAtB,EAAuC,CAAC,MAAD,CAAvC,EAAiD,IAAjD;AACH;;AAED,SAAKC,UAAL;AACH;AAxHU,CAAf","sourcesContent":["/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */\n'use strict';\n\nexport default {\n    name: 'font',\n    display: 'submenu',\n    add: function (core, targetElement) {\n        const context = core.context;\n        context.font = {\n            targetText: targetElement.querySelector('.txt'),\n            targetTooltip: targetElement.parentNode.querySelector('.se-tooltip-text'),\n            _fontList: null,\n            currentFont: ''\n        };\n\n        /** set submenu */\n        let listDiv = this.setSubmenu(core);\n\n        /** add event listeners */\n        listDiv.querySelector('.se-list-inner').addEventListener('click', this.pickup.bind(core));\n\n        context.font._fontList = listDiv.querySelectorAll('ul li button');\n\n        /** append target button menu */\n        core.initMenuTarget(this.name, targetElement, listDiv);\n\n        /** empty memory */\n        listDiv = null;\n    },\n\n    setSubmenu: function (core) {\n        const option = core.options;\n        const lang = core.lang;\n        const listDiv = core.util.createElement('DIV');\n\n        listDiv.className = 'se-submenu se-list-layer se-list-font-family';\n\n        let font, text, i, len;\n        let fontList = !option.font ?\n            [\n                'Arial',\n                'Comic Sans MS',\n                'Courier New',\n                'Impact',\n                'Georgia',\n                'tahoma',\n                'Trebuchet MS',\n                'Verdana'\n            ] : option.font;\n\n        let list = '<div class=\"se-list-inner\">' +\n                '<ul class=\"se-list-basic\">' +\n                    '<li><button type=\"button\" class=\"default_value se-btn-list\" title=\"' + lang.toolbar.default + '\">(' + lang.toolbar.default + ')</button></li>';\n        for (i = 0, len = fontList.length; i < len; i++) {\n            font = fontList[i];\n            text = font.split(',')[0];\n            list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + font + '\" data-txt=\"' + text + '\" title=\"' + text + '\" style=\"font-family:' + font + ';\">' + text + '</button></li>';\n        }\n        list += '</ul></div>';\n        listDiv.innerHTML = list;\n\n        return listDiv;\n    },\n\n     /**\n     * @Override core\n     */\n    active: function (element) {\n        const target = this.context.font.targetText;\n        const tooltip = this.context.font.targetTooltip;\n\n        if (!element) {\n            const font = this.hasFocus ? this.wwComputedStyle.fontFamily : this.lang.toolbar.font;\n            this.util.changeTxt(target, font);\n            this.util.changeTxt(tooltip, this.hasFocus ? this.lang.toolbar.font + ' (' + font + ')' : font);\n        } else if (element.style && element.style.fontFamily.length > 0) {\n            const selectFont = element.style.fontFamily.replace(/[\"']/g,'');\n            this.util.changeTxt(target, selectFont);\n            this.util.changeTxt(tooltip, this.lang.toolbar.font + ' (' + selectFont + ')');\n            return true;\n        }\n\n        return false;\n    },\n\n     /**\n     * @Override submenu\n     */\n    on: function () {\n        const fontContext = this.context.font;\n        const fontList = fontContext._fontList;\n        const currentFont = fontContext.targetText.textContent;\n\n        if (currentFont !== fontContext.currentFont) {\n            for (let i = 0, len = fontList.length; i < len; i++) {\n                if (currentFont === fontList[i].getAttribute('data-value')) {\n                    this.util.addClass(fontList[i], 'active');\n                } else {\n                    this.util.removeClass(fontList[i], 'active');\n                }\n            }\n\n            fontContext.currentFont = currentFont;\n        }\n    },\n\n    pickup: function (e) {\n        if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const value = e.target.getAttribute('data-value');\n\n        if (value) {\n            const newNode = this.util.createElement('SPAN');\n            newNode.style.fontFamily = value;\n            this.nodeChange(newNode, ['font-family'], null, null);\n        } else {\n            this.nodeChange(null, ['font-family'], ['span'], true);\n        }\n        \n        this.submenuOff();\n    }\n};\n"]},"metadata":{},"sourceType":"module"}