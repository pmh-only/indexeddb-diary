{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/indexed-db.ts","webpack:///./src/index.tsx","webpack:///./src/indexed-context.tsx","webpack:///external \"react\"","webpack:///./src/Utils.ts","webpack:///./src/indexed-hooks.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DBMode","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","openDatabase","dbName","version","upgradeCallback","Promise","resolve","reject","db","request","open","onsuccess","event","result","onerror","error","onupgradeneeded","storeSchemas","database","target","forEach","storeSchema","objectStoreNames","contains","store","createObjectStore","storeConfig","schema","createIndex","keypath","options","close","e","currentStore","add","then","createTransaction","optionsGenerator","readwrite","objectStore","evt","getByID","id","validateBeforeTransaction","readonly","getAll","update","transaction","oncomplete","put","deleteRecord","delete","clear","openCursor","cursorCallback","keyRange","getByIndex","indexName","index","AccessDB","IndexedDB","IndexedDBContext","createContext","IndexedDBProvider","Provider","IndexedDBCosumer","Consumer","children","currentTarget","DBOperations","require","validateStoreName","storeName","trans","dbMode","complete","onabort","abort","type","indexeddbConfiguration","objectStoresMeta","freeze","CreateObjectStore","Error"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import { validateBeforeTransaction, createTransaction, optionsGenerator } from './Utils';\nimport { ObjectStoreMeta, ObjectStoreSchema } from './indexed-hooks';\n\nexport type Key = string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange;\nexport interface IndexDetails {\n  indexName: string;\n  order: string;\n}\nconst indexedDB: IDBFactory =\n  window.indexedDB || (<any>window).mozIndexedDB || (<any>window).webkitIndexedDB || (<any>window).msIndexedDB;\n\nexport function openDatabase(dbName: string, version: number, upgradeCallback?: Function) {\n  return new Promise<IDBDatabase>((resolve, reject) => {\n    const request = indexedDB.open(dbName, version);\n    let db: IDBDatabase;\n    request.onsuccess = (event: Event) => {\n      db = request.result;\n      resolve(db);\n    };\n    request.onerror = (event: Event) => {\n      reject(`IndexedDB error: ${request.error}`);\n    };\n    if (typeof upgradeCallback === 'function') {\n      request.onupgradeneeded = (event: Event) => {\n        upgradeCallback(event, db);\n      };\n    }\n  });\n}\n\nexport function CreateObjectStore(dbName: string, version: number, storeSchemas: ObjectStoreMeta[]) {\n  const request: IDBOpenDBRequest = indexedDB.open(dbName, version);\n\n  request.onupgradeneeded = function(event: IDBVersionChangeEvent) {\n    const database: IDBDatabase = (event.target as any).result;\n    storeSchemas.forEach((storeSchema: ObjectStoreMeta) => {\n      if (!database.objectStoreNames.contains(storeSchema.store)) {\n        const objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);\n        storeSchema.storeSchema.forEach((schema: ObjectStoreSchema) => {\n          objectStore.createIndex(schema.name, schema.keypath, schema.options);\n        });\n      }\n    });\n    database.close();\n  };\n  request.onsuccess = function(e: any) {\n    e.target.result.close();\n  };\n}\n\nexport function DBOperations(dbName: string, version: number, currentStore: string) {\n  return {\n    add<T>(value: T, key?: any) {\n      return new Promise<number>((resolve, reject) => {\n        openDatabase(dbName, version).then((db: IDBDatabase) => {\n          let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, currentStore, reject, resolve)),\n            objectStore = transaction.objectStore(currentStore);\n          let request = objectStore.add(value, key);\n          request.onsuccess = (evt: any) => {\n            key = evt.target.result;\n            resolve(key);\n          };\n        });\n      });\n    },\n    getByID<T>(id: string | number) {\n      return new Promise<T>((resolve, reject) => {\n        openDatabase(dbName, version).then((db: IDBDatabase) => {\n          validateBeforeTransaction(db, currentStore, reject);\n          let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, currentStore, reject, resolve)),\n            objectStore = transaction.objectStore(currentStore),\n            request: IDBRequest;\n          request = objectStore.get(+id);\n          request.onsuccess = function(event: Event) {\n            resolve((event.target as any).result as T);\n          };\n        });\n      });\n    },\n    getAll<T>() {\n      return new Promise<T[]>((resolve, reject) => {\n        openDatabase(dbName, version).then(db => {\n          validateBeforeTransaction(db, currentStore, reject);\n          let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, currentStore, reject, resolve)),\n            objectStore = transaction.objectStore(currentStore),\n            result: Array<any> = [];\n\n          const request: IDBRequest = objectStore.getAll();\n\n          request.onerror = function(e) {\n            reject(e);\n          };\n\n          request.onsuccess = function({ target: { result } }: any) {\n            resolve(result as T[]);\n          };\n        });\n      });\n    },\n    update<T>(value: T, key?: any) {\n      return new Promise<any>((resolve, reject) => {\n        openDatabase(dbName, version).then(db => {\n          validateBeforeTransaction(db, currentStore, reject);\n          let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, currentStore, reject, resolve)),\n            objectStore = transaction.objectStore(currentStore);\n          transaction.oncomplete = event => {\n            resolve(event);\n          };\n          objectStore.put(value, key);\n        });\n      });\n    },\n    deleteRecord(key: Key) {\n      return new Promise<any>((resolve, reject) => {\n        openDatabase(dbName, version).then(db => {\n          validateBeforeTransaction(db, currentStore, reject);\n          let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, currentStore, reject, resolve)),\n            objectStore = transaction.objectStore(currentStore);\n          let request = objectStore.delete(key);\n          request.onsuccess = event => {\n            resolve(event);\n          };\n        });\n      });\n    },\n    clear() {\n      return new Promise<any>((resolve, reject) => {\n        openDatabase(dbName, version).then(db => {\n          validateBeforeTransaction(db, currentStore, reject);\n          let transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, currentStore, reject, resolve)),\n            objectStore = transaction.objectStore(currentStore);\n          objectStore.clear();\n          transaction.oncomplete = event => {\n            resolve();\n          };\n        });\n      });\n    },\n    openCursor(cursorCallback: (event: Event) => void, keyRange?: IDBKeyRange) {\n      return new Promise<void>((resolve, reject) => {\n        openDatabase(dbName, version).then(db => {\n          validateBeforeTransaction(db, currentStore, reject);\n          let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, currentStore, reject, resolve)),\n            objectStore = transaction.objectStore(currentStore),\n            request = objectStore.openCursor(keyRange);\n\n          request.onsuccess = (event: Event) => {\n            cursorCallback(event);\n            resolve();\n          };\n        });\n      });\n    },\n    getByIndex(indexName: string, key: any) {\n      return new Promise<any>((resolve, reject) => {\n        openDatabase(dbName, version).then(db => {\n          validateBeforeTransaction(db, currentStore, reject);\n          let transaction = createTransaction(db, optionsGenerator(DBMode.readonly, currentStore, reject, resolve)),\n            objectStore = transaction.objectStore(currentStore),\n            index = objectStore.index(indexName),\n            request = index.get(key);\n          request.onsuccess = (event: Event) => {\n            resolve((<IDBOpenDBRequest>event.target).result);\n          };\n        });\n      });\n    }\n  };\n}\n\nexport enum DBMode {\n  readonly = 'readonly',\n  readwrite = 'readwrite'\n}\n","export { AccessDB, IndexedDB } from './indexed-context';\nexport * from './indexed-hooks';\n","import React, { ReactNode } from 'react';\nimport { DBOperations, openDatabase, Key } from './indexed-db';\n\ninterface IndexedDBProps {\n  name: string;\n  version: number;\n  children: ReactNode;\n  objectStoresMeta: ObjectStoreMeta[];\n}\n\ninterface ObjectStoreMeta {\n  store: string;\n  storeConfig: { keyPath: string; autoIncrement: boolean; [key: string]: any };\n  storeSchema: ObjectStoreSchema[];\n}\n\ninterface ObjectStoreSchema {\n  name: string;\n  keypath: string;\n  options: { unique: boolean; [key: string]: any };\n}\n\nconst IndexedDBContext = React.createContext<{ db: any; name: string; version: number }>({\n  db: null,\n  name: null,\n  version: null\n});\n\nconst IndexedDBProvider = IndexedDBContext.Provider;\nconst IndexedDBCosumer = IndexedDBContext.Consumer;\n\nexport function IndexedDB({ name, version, children, objectStoresMeta }: IndexedDBProps) {\n  objectStoresMeta.forEach(async (schema: ObjectStoreMeta) => {\n    const db = await openDatabase(name, version, (event: any) => {\n      let db: IDBDatabase = event.currentTarget.result;\n      let objectStore = db.createObjectStore(schema.store, schema.storeConfig);\n      schema.storeSchema.forEach((schema: ObjectStoreSchema) => {\n        objectStore.createIndex(schema.name, schema.keypath, schema.options);\n      });\n    });\n  });\n  return <IndexedDBProvider value={{ db: null, name, version }}>{children}</IndexedDBProvider>;\n}\n\ninterface AccessDBProps {\n  children: ({\n    db\n  }: {\n    db: IDBDatabase;\n    add: <T = any>(value: T, key?: any) => Promise<number>;\n    getByID: <T = any>(id: number | string) => Promise<T>;\n    getAll: <T = any>() => Promise<T[]>;\n    update: <T = any>(value: T, key?: any) => Promise<any>;\n    deleteRecord: (key: Key) => Promise<any>;\n    openCursor: (cursorCallback: (event: Event) => void, keyRange?: IDBKeyRange) => Promise<void>;\n    getByIndex: (indexName: string, key: any) => Promise<any>;\n    clear: () => Promise<any>;\n  }) => {};\n  objectStore: string;\n}\n\nexport function AccessDB({ children, objectStore }: AccessDBProps) {\n  return (\n    <IndexedDBCosumer>\n      {value => {\n        const { db, name, version } = value;\n        // openDatabase(name, version);\n        return children({ db, ...DBOperations(name, version, objectStore) });\n      }}\n    </IndexedDBCosumer>\n  );\n}\n","module.exports = require(\"react\");","export interface Options {\n  storeName: string;\n  dbMode: IDBTransactionMode;\n  error: (e: Event) => any;\n  complete: (e: Event) => any;\n  abort?: any;\n}\n\nexport function validateStoreName(db: IDBDatabase, storeName: string) {\n  return db.objectStoreNames.contains(storeName);\n}\n\nexport function validateBeforeTransaction(db: IDBDatabase, storeName: string, reject: Function) {\n  if (!db) {\n    reject('You need to use the openDatabase function to create a database before you query it!');\n  }\n  if (!validateStoreName(db, storeName)) {\n    reject(`objectStore does not exists: ${storeName}`);\n  }\n}\n\nexport function createTransaction(db: IDBDatabase, options: Options): IDBTransaction {\n  let trans: IDBTransaction = db.transaction(options.storeName, options.dbMode);\n  trans.onerror = options.error;\n  trans.oncomplete = options.complete;\n  trans.onabort = options.abort;\n  return trans;\n}\n\nexport function optionsGenerator(type: any, storeName: any, reject: Function, resolve: Function): Options {\n  return {\n    storeName: storeName,\n    dbMode: type,\n    error: (e: Event) => {\n      reject(e);\n    },\n    complete: (e: Event) => {\n      resolve();\n    },\n    abort: (e: Event) => {\n      reject(e);\n    }\n  };\n}\n\n// export function* processRequest({ request, success, error }: any) {\n//   request.onerror = function(event: Event) {\n//     error(error);\n//     yield error;\n//   };\n//   request.onsuccess = function(evt: Event) {\n//     let cursor: IDBCursorWithValue = (<IDBRequest>evt.target).result;\n//     if (cursor) {\n//       result.push(cursor.value);\n//       cursor.continue();\n//     } else {\n//       resolve(result);\n//     }\n//   };\n// }\n","import { DBOperations, openDatabase, Key, CreateObjectStore } from './indexed-db';\n\nexport interface IndexedDBProps {\n  name: string;\n  version: number;\n  objectStoresMeta: ObjectStoreMeta[];\n}\n\nexport interface ObjectStoreMeta {\n  store: string;\n  storeConfig: { keyPath: string; autoIncrement: boolean; [key: string]: any };\n  storeSchema: ObjectStoreSchema[];\n}\n\nexport interface ObjectStoreSchema {\n  name: string;\n  keypath: string;\n  options: { unique: boolean; [key: string]: any };\n}\n\nexport interface useIndexedDB {\n  dbName: string;\n  version: number;\n  objectStore: string;\n}\n\nlet indexeddbConfiguration: { version: number; name: string } = { version: null, name: null };\n\nexport function initDB({ name, version, objectStoresMeta }: IndexedDBProps) {\n  indexeddbConfiguration.name = name;\n  indexeddbConfiguration.version = version;\n  Object.freeze(indexeddbConfiguration);\n  CreateObjectStore(name, version, objectStoresMeta);\n}\n\nexport function useIndexedDB(\n  objectStore: string\n): {\n  add: <T = any>(value: T, key?: any) => Promise<number>;\n  getByID: <T = any>(id: number | string) => Promise<T>;\n  getAll: <T = any>() => Promise<T[]>;\n  update: <T = any>(value: T, key?: any) => Promise<any>;\n  deleteRecord: (key: Key) => Promise<any>;\n  openCursor: (cursorCallback: (event: Event) => void, keyRange?: IDBKeyRange) => Promise<void>;\n  getByIndex: (indexName: string, key: any) => Promise<any>;\n  clear: () => Promise<any>;\n} {\n  if (!indexeddbConfiguration.name || !indexeddbConfiguration.version) {\n    throw new Error('Please, initialize the DB before the use.');\n  }\n  return { ...DBOperations(indexeddbConfiguration.name, indexeddbConfiguration.version, objectStore) };\n}\n"],"sourceRoot":""}